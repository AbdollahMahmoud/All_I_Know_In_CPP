March The 21st
    2023                        Initialization
~~~~~~~~~~~~~~                  ~~~~~~~~~~~~~~

Initialization is not assignment. Initialization happens when a variable
    is given a value when it is created. Assignment replaces object's value with a new one.
    
    *Do not leave variables uninitialized..
    An uninitialized variable has an indeterminate value. Most compilers will warn about 
    at least some uses of uninitialized variables.
    Other times, the program completes but produces an error.
    Even worse, the results may appear correct on one run of our program but fail on a
    subsequent run.

    Depending on context, the initializer may invoke:
        Default Initialization, e.g. int a;
        Copy initialization, e.g. std::string s = "hello"; 
        Direct initialization, e.g. std::string s("hello");
            Direct initialization is used when values are explicitly cast to another type.

    /*C++11: Uniform Initialization*/
    List initialization was introduced to provide a more consistent initialization syntax 
    (which is why it is sometimes called “uniform initialization”) that works in most cases.
    Additionally, list initialization provides a way to initialize objects with a list of values 
    (which is why it is called “list initialization”).        
        Value initialization, e.g. std::string s = {}; or std::string s{};
        List initialization, e.g. std::string s = {'a', 'b', 'c'}; or std::string s{'a', 'b', 'c'};
        Aggregate initialization, e.g. char a[3] = {'a', 'b'}; or char a[3] {'a', 'b'};
        Reference initialization, e.g. char& c = a[0];

/*****************/     /*******************/       /*****************/     /*****************/

-List Initialization:
 -------------------

Direct, Copy and Value initialization.
    int width { 5 };    // direct list initialization of value 5 into variable width (preferred)
    int height = { 6 }; // copy list initialization of value 6 into variable height
    int depth {};       // value initialization (see next section)

List initialization has an added benefit: 
    it disallows “narrowing conversions”. This means that if you try to brace initialize 
    a variable using a value that the variable can not safely hold, the compiler will produce an error. For example:
    int width { 4.5 }; // error: a number with a fractional value can't fit into an int.

Q: When should I initialize with { 0 } vs {}?

Use an explicit initialization value if you’re actually using that value.

    int x { 0 };    // explicit initialization to value 0
    std::cout << x; // we're using that zero value

Use value initialization if the value is temporary and will be replaced.

    int x {};      // value initialization
    std::cin >> x; // we're immediately replacing that value



In C++17, there's an attribute called the [[maybe_unused]] attribute. 
This attribute tells the compiler to expect that the variable may not be used, so it will not generate unused variable warnings.

The following program should generate no warnings/errors, even though x is unused:

    int main()
    {
        [[maybe_unused]] int x { 5 };

        // since x is [[maybe_unused]], no warning generated

        return 0;
    }

Q: What are default initialization and value initialization? 
   What is the behavior of each? Which should you prefer?

Default initialization is when a variable initialization has no initializer (e.g. int x;). In most cases, the variable is left with an indeterminate value.

Value initialization is when a variable initialization has an empty brace (e.g. int x{};). In most cases this will perform zero-initialization.

You should prefer value initialization to default initialization.